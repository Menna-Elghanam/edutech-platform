
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  name           String?
  email          String   @unique
  password       String?
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  role      Role     @default(STUDENT) 
  // Relations
  courses   Course[] 
  enrollments   Enrollment[]
  lessonProgress LessonProgress[]
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  thumbnail   String
  featured    Boolean  @default(false)
  duration    String   @default("6 weeks")        
  price       Float    @default(0)                // 0 = Free
  rating      Float    @default(4.5)              // Average rating
  studentsCount Int    @default(0)                
  level       Level    @default(BEGINNER)         // Course difficulty
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())  
  
  // Relations
  creator     User?    @relation(fields: [creatorId], references: [id])
  creatorId   String?
  enrollments Enrollment[]
  sections    Section[]  
}

model Section {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int      // For ordering sections within a course
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  lessons     Lesson[] // ‚Üê Relation to lessons
  
  @@unique([courseId, order]) 
}

model Lesson {
  id          String     @id @default(cuid())
  title       String
  description String?
  content     String?    // Rich text content
  videoUrl    String?    
  duration    Int?       
  order       Int        // For ordering lessons within a section
  type        LessonType @default(TEXT)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  section     Section    @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId   String
  rogress    LessonProgress[]
  
  @@unique([sectionId, order]) 
}

model LessonProgress {
  id          String   @id @default(cuid())
  completed   Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId    String
  
  @@unique([userId, lessonId]) // One progress record per user per lesson
}

model Enrollment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // Relations
  user      User   @relation(fields: [userId], references: [id])
  userId    String
  course    Course @relation(fields: [courseId], references: [id])
  courseId  String

  @@unique([userId, courseId]) 
}

enum Role {
  ADMIN
  STUDENT
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum LessonType {
  TEXT
  VIDEO
  QUIZ
  ASSIGNMENT
}